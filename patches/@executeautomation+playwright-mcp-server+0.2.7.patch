diff --git a/node_modules/@executeautomation/playwright-mcp-server/dist/tools.js b/node_modules/@executeautomation/playwright-mcp-server/dist/tools.js
index a5a3ca4..5a67db8 100644
--- a/node_modules/@executeautomation/playwright-mcp-server/dist/tools.js
+++ b/node_modules/@executeautomation/playwright-mcp-server/dist/tools.js
@@ -6,6 +6,9 @@ export function createToolDefinitions() {
             inputSchema: {
                 type: "object",
                 properties: {
+                    channel: { type: "string", description: "Channel to use for browser instance" },
+                    mode: { type: "string", description: "Mode to use for browser instance(default: incognito)" },
+                    isMobile: { type: "boolean", description: "Emulate mobile device (default: false)" },     
                     url: { type: "string" },
                     width: { type: "number", description: "Viewport width in pixels (default: 1920)" },
                     height: { type: "number", description: "Viewport height in pixels (default: 1080)" },
diff --git a/node_modules/@executeautomation/playwright-mcp-server/dist/toolsHandler.js b/node_modules/@executeautomation/playwright-mcp-server/dist/toolsHandler.js
index 0844df1..7b5d5ee 100644
--- a/node_modules/@executeautomation/playwright-mcp-server/dist/toolsHandler.js
+++ b/node_modules/@executeautomation/playwright-mcp-server/dist/toolsHandler.js
@@ -6,20 +6,68 @@ import * as path from 'path';
 // Global state
 let browser;
 let page;
+let chromePath;
 const consoleLogs = [];
 const screenshots = new Map();
 const defaultDownloadsPath = path.join(os.homedir(), 'Downloads');
-async function ensureBrowser(viewport) {
+
+async function ensureBrowser(browserConfig) {
     if (!browser) {
-        browser = await chromium.launch({ headless: false });
-        const context = await browser.newContext({
-            viewport: {
-                width: viewport?.width ?? 1920,
-                height: viewport?.height ?? 1080,
-            },
-            deviceScaleFactor: 1,
-        });
-        page = await context.newPage();
+
+        if (browserConfig?.channel === 'chrome') {
+            const platform = os.platform();
+            switch (platform) {
+                case 'win32':  // Windows
+                    chromePath = 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe';
+                    break;
+                case 'darwin':  // macOS
+                    chromePath = '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome';
+                    break;
+                case 'linux':  // Linux
+                    chromePath = '/usr/bin/google-chrome';
+                    break;
+                default:
+                    chromePath = undefined; // Use Playwright’s built-in Chromium
+                    break;
+                }
+        } else {
+            chromePath = undefined; // Default to Playwright’s Chromium
+        }
+            
+        const viewport = {
+            width: browserConfig?.width ?? (browserConfig?.isMobile ? 375 : 1920),
+            height: browserConfig?.height ?? (browserConfig?.isMobile ? 812 : 1080),
+        };
+        const userAgent = browserConfig?.isMobile ? 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1' : undefined;
+            
+        if (browserConfig?.mode === 'normal') {
+            browser = await chromium.launchPersistentContext("", {
+                headless: false,
+                ...(chromePath && { executablePath: chromePath }),
+                channel: browserConfig?.channel ?? 'chromium',
+                viewport: viewport,
+                userAgent: userAgent,
+            });
+            
+            const pages = browser.pages();
+            page = pages[0];
+        } else {
+            browser = await chromium.launch({
+                headless: false,
+                ...(chromePath && { executablePath: chromePath }),
+                channel: browserConfig?.channel ?? 'chromium'
+            });
+            
+            const context = await browser.newContext({
+                viewport,
+                userAgent: userAgent,
+                deviceScaleFactor: 1,
+                isMobile: browserConfig?.isMobile ?? false,
+            });
+            
+            page = await context.newPage();
+        }
+        
         page.on("console", (msg) => {
             const logEntry = `[${msg.type()}] ${msg.text()}`;
             consoleLogs.push(logEntry);
@@ -42,6 +90,9 @@ export async function handleToolCall(name, args, server) {
     // Only launch browser if the tool requires browser interaction
     if (requiresBrowser) {
         page = await ensureBrowser({
+            channel: args.channel,
+            mode: args.mode,
+            isMobile: args.isMobile,
             width: args.width,
             height: args.height
         });
