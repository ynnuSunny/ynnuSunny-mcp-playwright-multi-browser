diff --git a/node_modules/@executeautomation/playwright-mcp-server/dist/tools.js b/node_modules/@executeautomation/playwright-mcp-server/dist/tools.js
index a5a3ca4..d0b8643 100644
--- a/node_modules/@executeautomation/playwright-mcp-server/dist/tools.js
+++ b/node_modules/@executeautomation/playwright-mcp-server/dist/tools.js
@@ -6,6 +6,8 @@ export function createToolDefinitions() {
             inputSchema: {
                 type: "object",
                 properties: {
+                    channel: { type: "string", description: "Channel to use for browser instance" },
+                    mode: { type: "string", description: "Mode to use for browser instance(default: incognito)" },
                     url: { type: "string" },
                     width: { type: "number", description: "Viewport width in pixels (default: 1920)" },
                     height: { type: "number", description: "Viewport height in pixels (default: 1080)" },
diff --git a/node_modules/@executeautomation/playwright-mcp-server/dist/toolsHandler.js b/node_modules/@executeautomation/playwright-mcp-server/dist/toolsHandler.js
index 0844df1..ae8241e 100644
--- a/node_modules/@executeautomation/playwright-mcp-server/dist/toolsHandler.js
+++ b/node_modules/@executeautomation/playwright-mcp-server/dist/toolsHandler.js
@@ -9,17 +9,37 @@ let page;
 const consoleLogs = [];
 const screenshots = new Map();
 const defaultDownloadsPath = path.join(os.homedir(), 'Downloads');
-async function ensureBrowser(viewport) {
+
+
+async function ensureBrowser(viewportConfig) {
     if (!browser) {
-        browser = await chromium.launch({ headless: false });
-        const context = await browser.newContext({
-            viewport: {
-                width: viewport?.width ?? 1920,
-                height: viewport?.height ?? 1080,
-            },
-            deviceScaleFactor: 1,
-        });
-        page = await context.newPage();
+        if (viewportConfig?.mode === 'incognito') {
+            browser = await chromium.launch({ headless: false, channel: viewportConfig?.channel ?? 'chromium' });
+            const context = await browser.newContext({
+                viewportConfig: {
+                    width: viewportConfig?.width ?? 1920,
+                    height: viewportConfig?.height ?? 1080,
+                },
+                deviceScaleFactor: 1,
+            });
+
+            page = await context.newPage();
+
+        } else {
+            browser = await chromium.launchPersistentContext("", {
+                headless: false,
+                channel: viewportConfig?.channel ?? 'chromium',
+                viewportConfig: {
+                    width: viewportConfig?.width ?? 1920,
+                    height: viewportConfig?.height ?? 1080,
+                },
+            });
+
+            const pages = browser.pages();
+            page = pages[0];
+        }
+
+
         page.on("console", (msg) => {
             const logEntry = `[${msg.type()}] ${msg.text()}`;
             consoleLogs.push(logEntry);
@@ -27,6 +47,7 @@ async function ensureBrowser(viewport) {
     }
     return page;
 }
+
 async function ensureApiContext(url) {
     return await request.newContext({
         baseURL: url,
@@ -42,6 +63,8 @@ export async function handleToolCall(name, args, server) {
     // Only launch browser if the tool requires browser interaction
     if (requiresBrowser) {
         page = await ensureBrowser({
+            channel: args.channel,
+            mode: args.mode,
             width: args.width,
             height: args.height
         });
@@ -59,18 +82,18 @@ export async function handleToolCall(name, args, server) {
                 });
                 return {
                     content: [{
-                            type: "text",
-                            text: `Navigated to ${args.url}`,
-                        }],
+                        type: "text",
+                        text: `Navigated to ${args.url}`,
+                    }],
                     isError: false,
                 };
             }
             catch (error) {
                 return {
                     content: [{
-                            type: "text",
-                            text: `Navigation failed: ${error.message}`,
-                        }],
+                        type: "text",
+                        text: `Navigation failed: ${error.message}`,
+                    }],
                     isError: true,
                 };
             }
@@ -85,9 +108,9 @@ export async function handleToolCall(name, args, server) {
                     if (!element) {
                         return {
                             content: [{
-                                    type: "text",
-                                    text: `Element not found: ${args.selector}`,
-                                }],
+                                type: "text",
+                                text: `Element not found: ${args.selector}`,
+                            }],
                             isError: true
                         };
                     }
@@ -135,9 +158,9 @@ export async function handleToolCall(name, args, server) {
             catch (error) {
                 return {
                     content: [{
-                            type: "text",
-                            text: `Screenshot failed: ${error.message}`,
-                        }],
+                        type: "text",
+                        text: `Screenshot failed: ${error.message}`,
+                    }],
                     isError: true,
                 };
             }
@@ -147,18 +170,18 @@ export async function handleToolCall(name, args, server) {
                 await page.click(args.selector);
                 return {
                     content: [{
-                            type: "text",
-                            text: `Clicked: ${args.selector}`,
-                        }],
+                        type: "text",
+                        text: `Clicked: ${args.selector}`,
+                    }],
                     isError: false,
                 };
             }
             catch (error) {
                 return {
                     content: [{
-                            type: "text",
-                            text: `Failed to click ${args.selector}: ${error.message}`,
-                        }],
+                        type: "text",
+                        text: `Failed to click ${args.selector}: ${error.message}`,
+                    }],
                     isError: true,
                 };
             }
@@ -168,18 +191,18 @@ export async function handleToolCall(name, args, server) {
                 await page.fill(args.selector, args.value);
                 return {
                     content: [{
-                            type: "text",
-                            text: `Filled ${args.selector} with: ${args.value}`,
-                        }],
+                        type: "text",
+                        text: `Filled ${args.selector} with: ${args.value}`,
+                    }],
                     isError: false,
                 };
             }
             catch (error) {
                 return {
                     content: [{
-                            type: "text",
-                            text: `Failed to type ${args.selector}: ${error.message}`,
-                        }],
+                        type: "text",
+                        text: `Failed to type ${args.selector}: ${error.message}`,
+                    }],
                     isError: true,
                 };
             }
@@ -189,18 +212,18 @@ export async function handleToolCall(name, args, server) {
                 await page.selectOption(args.selector, args.value);
                 return {
                     content: [{
-                            type: "text",
-                            text: `Selected ${args.selector} with: ${args.value}`,
-                        }],
+                        type: "text",
+                        text: `Selected ${args.selector} with: ${args.value}`,
+                    }],
                     isError: false,
                 };
             }
             catch (error) {
                 return {
                     content: [{
-                            type: "text",
-                            text: `Failed to select ${args.selector}: ${error.message}`,
-                        }],
+                        type: "text",
+                        text: `Failed to select ${args.selector}: ${error.message}`,
+                    }],
                     isError: true,
                 };
             }
@@ -210,18 +233,18 @@ export async function handleToolCall(name, args, server) {
                 await page.hover(args.selector);
                 return {
                     content: [{
-                            type: "text",
-                            text: `Hovered ${args.selector}`,
-                        }],
+                        type: "text",
+                        text: `Hovered ${args.selector}`,
+                    }],
                     isError: false,
                 };
             }
             catch (error) {
                 return {
                     content: [{
-                            type: "text",
-                            text: `Failed to hover ${args.selector}: ${error.message}`,
-                        }],
+                        type: "text",
+                        text: `Failed to hover ${args.selector}: ${error.message}`,
+                    }],
                     isError: true,
                 };
             }
@@ -259,9 +282,9 @@ export async function handleToolCall(name, args, server) {
             catch (error) {
                 return {
                     content: [{
-                            type: "text",
-                            text: `Script execution failed: ${error.message}`,
-                        }],
+                        type: "text",
+                        text: `Script execution failed: ${error.message}`,
+                    }],
                     isError: true,
                 };
             }
@@ -270,17 +293,17 @@ export async function handleToolCall(name, args, server) {
                 var response = await apiContext.get(args.url);
                 return {
                     content: [{
-                            type: "text",
-                            text: `Performed GET Operation ${args.url}`,
-                        },
-                        {
-                            type: "text",
-                            text: `Response: ${JSON.stringify(await response.json(), null, 2)}`,
-                        },
-                        {
-                            type: "text",
-                            text: `Response code ${response.status()}`
-                        }
+                        type: "text",
+                        text: `Performed GET Operation ${args.url}`,
+                    },
+                    {
+                        type: "text",
+                        text: `Response: ${JSON.stringify(await response.json(), null, 2)}`,
+                    },
+                    {
+                        type: "text",
+                        text: `Response code ${response.status()}`
+                    }
                     ],
                     isError: false,
                 };
@@ -288,9 +311,9 @@ export async function handleToolCall(name, args, server) {
             catch (error) {
                 return {
                     content: [{
-                            type: "text",
-                            text: `Failed to perform GET operation on ${args.url}: ${error.message}`,
-                        }],
+                        type: "text",
+                        text: `Failed to perform GET operation on ${args.url}: ${error.message}`,
+                    }],
                     isError: true,
                 };
             }
@@ -305,26 +328,26 @@ export async function handleToolCall(name, args, server) {
                 var response = await apiContext.post(args.url, data);
                 return {
                     content: [{
-                            type: "text",
-                            text: `Performed POST Operation ${args.url} with data ${JSON.stringify(args.value, null, 2)}`,
-                        },
-                        {
-                            type: "text",
-                            text: `Response: ${JSON.stringify(await response.json(), null, 2)}`,
-                        },
-                        {
-                            type: "text",
-                            text: `Response code ${response.status()}`
-                        }],
+                        type: "text",
+                        text: `Performed POST Operation ${args.url} with data ${JSON.stringify(args.value, null, 2)}`,
+                    },
+                    {
+                        type: "text",
+                        text: `Response: ${JSON.stringify(await response.json(), null, 2)}`,
+                    },
+                    {
+                        type: "text",
+                        text: `Response code ${response.status()}`
+                    }],
                     isError: false,
                 };
             }
             catch (error) {
                 return {
                     content: [{
-                            type: "text",
-                            text: `Failed to perform POST operation on ${args.url}: ${error.message}`,
-                        }],
+                        type: "text",
+                        text: `Failed to perform POST operation on ${args.url}: ${error.message}`,
+                    }],
                     isError: true,
                 };
             }
@@ -339,25 +362,25 @@ export async function handleToolCall(name, args, server) {
                 var response = await apiContext.put(args.url, data);
                 return {
                     content: [{
-                            type: "text",
-                            text: `Performed PUT Operation ${args.url} with data ${JSON.stringify(args.value, null, 2)}`,
-                        }, {
-                            type: "text",
-                            text: `Response: ${JSON.stringify(await response.json(), null, 2)}`,
-                        },
-                        {
-                            type: "text",
-                            text: `Response code ${response.status()}`
-                        }],
+                        type: "text",
+                        text: `Performed PUT Operation ${args.url} with data ${JSON.stringify(args.value, null, 2)}`,
+                    }, {
+                        type: "text",
+                        text: `Response: ${JSON.stringify(await response.json(), null, 2)}`,
+                    },
+                    {
+                        type: "text",
+                        text: `Response code ${response.status()}`
+                    }],
                     isError: false,
                 };
             }
             catch (error) {
                 return {
                     content: [{
-                            type: "text",
-                            text: `Failed to perform PUT operation on ${args.url}: ${error.message}`,
-                        }],
+                        type: "text",
+                        text: `Failed to perform PUT operation on ${args.url}: ${error.message}`,
+                    }],
                     isError: true,
                 };
             }
@@ -366,22 +389,22 @@ export async function handleToolCall(name, args, server) {
                 var response = await apiContext.delete(args.url);
                 return {
                     content: [{
-                            type: "text",
-                            text: `Performed delete Operation ${args.url}`,
-                        },
-                        {
-                            type: "text",
-                            text: `Response code ${response.status()}`
-                        }],
+                        type: "text",
+                        text: `Performed delete Operation ${args.url}`,
+                    },
+                    {
+                        type: "text",
+                        text: `Response code ${response.status()}`
+                    }],
                     isError: false,
                 };
             }
             catch (error) {
                 return {
                     content: [{
-                            type: "text",
-                            text: `Failed to perform delete operation on ${args.url}: ${error.message}`,
-                        }],
+                        type: "text",
+                        text: `Failed to perform delete operation on ${args.url}: ${error.message}`,
+                    }],
                     isError: true,
                 };
             }
@@ -396,33 +419,33 @@ export async function handleToolCall(name, args, server) {
                 var response = await apiContext.patch(args.url, data);
                 return {
                     content: [{
-                            type: "text",
-                            text: `Performed PATCH Operation ${args.url} with data ${JSON.stringify(args.value, null, 2)}`,
-                        }, {
-                            type: "text",
-                            text: `Response: ${JSON.stringify(await response.json(), null, 2)}`,
-                        }, {
-                            type: "text",
-                            text: `Response code ${response.status()}`
-                        }],
+                        type: "text",
+                        text: `Performed PATCH Operation ${args.url} with data ${JSON.stringify(args.value, null, 2)}`,
+                    }, {
+                        type: "text",
+                        text: `Response: ${JSON.stringify(await response.json(), null, 2)}`,
+                    }, {
+                        type: "text",
+                        text: `Response code ${response.status()}`
+                    }],
                     isError: false,
                 };
             }
             catch (error) {
                 return {
                     content: [{
-                            type: "text",
-                            text: `Failed to perform PATCH operation on ${args.url}: ${error.message}`,
-                        }],
+                        type: "text",
+                        text: `Failed to perform PATCH operation on ${args.url}: ${error.message}`,
+                    }],
                     isError: true,
                 };
             }
         default:
             return {
                 content: [{
-                        type: "text",
-                        text: `Unknown tool: ${name}`,
-                    }],
+                    type: "text",
+                    text: `Unknown tool: ${name}`,
+                }],
                 isError: true,
             };
     }
diff --git a/node_modules/@executeautomation/playwright-mcp-server/package-lock.json b/node_modules/@executeautomation/playwright-mcp-server/package-lock.json
new file mode 100644
index 0000000..221b9a0
--- /dev/null
+++ b/node_modules/@executeautomation/playwright-mcp-server/package-lock.json
@@ -0,0 +1,537 @@
+{
+  "name": "@executeautomation/playwright-mcp-server",
+  "version": "0.2.7",
+  "lockfileVersion": 3,
+  "requires": true,
+  "packages": {
+    "": {
+      "name": "@executeautomation/playwright-mcp-server",
+      "version": "0.2.7",
+      "license": "MIT",
+      "dependencies": {
+        "@modelcontextprotocol/sdk": "1.4.1",
+        "@playwright/browser-chromium": "1.50.0",
+        "playwright": "1.50.0"
+      },
+      "bin": {
+        "playwright-mcp-server": "dist/index.js"
+      },
+      "devDependencies": {
+        "@types/node": "^20.10.5",
+        "shx": "^0.3.4",
+        "typescript": "^5.6.2"
+      }
+    },
+    "node_modules/@modelcontextprotocol/sdk": {
+      "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/@modelcontextprotocol/sdk/-/sdk-1.4.1.tgz",
+      "integrity": "sha512-wS6YC4lkUZ9QpP+/7NBTlVNiEvsnyl0xF7rRusLF+RsG0xDPc/zWR7fEEyhKnnNutGsDAZh59l/AeoWGwIb1+g==",
+      "license": "MIT",
+      "dependencies": {
+        "content-type": "^1.0.5",
+        "eventsource": "^3.0.2",
+        "raw-body": "^3.0.0",
+        "zod": "^3.23.8",
+        "zod-to-json-schema": "^3.24.1"
+      },
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@playwright/browser-chromium": {
+      "version": "1.50.0",
+      "resolved": "https://registry.npmjs.org/@playwright/browser-chromium/-/browser-chromium-1.50.0.tgz",
+      "integrity": "sha512-O2ZTMSArxJcBRfhUbcyzeZ4YLwwMCMINYJZIasDZQ3JBoI45m8ds4BSndvhpJGQrpyqI2tJHYooY+BIvlgI34w==",
+      "hasInstallScript": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "playwright-core": "1.50.0"
+      },
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@types/node": {
+      "version": "20.17.19",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.17.19.tgz",
+      "integrity": "sha512-LEwC7o1ifqg/6r2gn9Dns0f1rhK+fPFDoMiceTJ6kWmVk6bgXBI/9IOWfVan4WiAavK9pIVWdX0/e3J+eEUh5A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "undici-types": "~6.19.2"
+      }
+    },
+    "node_modules/balanced-match": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
+      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/brace-expansion": {
+      "version": "1.1.11",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
+      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
+    "node_modules/bytes": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
+      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/concat-map": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
+      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/content-type": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
+      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/depd": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
+      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/eventsource": {
+      "version": "3.0.5",
+      "resolved": "https://registry.npmjs.org/eventsource/-/eventsource-3.0.5.tgz",
+      "integrity": "sha512-LT/5J605bx5SNyE+ITBDiM3FxffBiq9un7Vx0EwMDM3vg8sWKx/tO2zC+LMqZ+smAM0F2hblaDZUVZF0te2pSw==",
+      "license": "MIT",
+      "dependencies": {
+        "eventsource-parser": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=18.0.0"
+      }
+    },
+    "node_modules/eventsource-parser": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/eventsource-parser/-/eventsource-parser-3.0.0.tgz",
+      "integrity": "sha512-T1C0XCUimhxVQzW4zFipdx0SficT651NnkR0ZSH3yQwh+mFMdLfgjABVi4YtMTtaL4s168593DaoaRLMqryavA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=18.0.0"
+      }
+    },
+    "node_modules/fs.realpath": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
+      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/fsevents": {
+      "version": "2.3.2",
+      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
+      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
+      "hasInstallScript": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
+      }
+    },
+    "node_modules/function-bind": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
+      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
+      "dev": true,
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/glob": {
+      "version": "7.2.3",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
+      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
+      "deprecated": "Glob versions prior to v9 are no longer supported",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^3.1.1",
+        "once": "^1.3.0",
+        "path-is-absolute": "^1.0.0"
+      },
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/hasown": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
+      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "function-bind": "^1.1.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/http-errors": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
+      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
+      "license": "MIT",
+      "dependencies": {
+        "depd": "2.0.0",
+        "inherits": "2.0.4",
+        "setprototypeof": "1.2.0",
+        "statuses": "2.0.1",
+        "toidentifier": "1.0.1"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/iconv-lite": {
+      "version": "0.6.3",
+      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
+      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
+      "license": "MIT",
+      "dependencies": {
+        "safer-buffer": ">= 2.1.2 < 3.0.0"
+      },
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/inflight": {
+      "version": "1.0.6",
+      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
+      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
+      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "once": "^1.3.0",
+        "wrappy": "1"
+      }
+    },
+    "node_modules/inherits": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
+      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
+      "license": "ISC"
+    },
+    "node_modules/interpret": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/interpret/-/interpret-1.4.0.tgz",
+      "integrity": "sha512-agE4QfB2Lkp9uICn7BAqoscw4SZP9kTE2hxiFI3jBPmXJfdqiahTbUuKGsMoN2GtqL9AxhYioAcVvgsb1HvRbA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.10"
+      }
+    },
+    "node_modules/is-core-module": {
+      "version": "2.16.1",
+      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
+      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "hasown": "^2.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/minimist": {
+      "version": "1.2.8",
+      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
+      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
+      "dev": true,
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/once": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
+      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "wrappy": "1"
+      }
+    },
+    "node_modules/path-is-absolute": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
+      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/path-parse": {
+      "version": "1.0.7",
+      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
+      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/playwright": {
+      "version": "1.50.0",
+      "resolved": "https://registry.npmjs.org/playwright/-/playwright-1.50.0.tgz",
+      "integrity": "sha512-+GinGfGTrd2IfX1TA4N2gNmeIksSb+IAe589ZH+FlmpV3MYTx6+buChGIuDLQwrGNCw2lWibqV50fU510N7S+w==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "playwright-core": "1.50.0"
+      },
+      "bin": {
+        "playwright": "cli.js"
+      },
+      "engines": {
+        "node": ">=18"
+      },
+      "optionalDependencies": {
+        "fsevents": "2.3.2"
+      }
+    },
+    "node_modules/playwright-core": {
+      "version": "1.50.0",
+      "resolved": "https://registry.npmjs.org/playwright-core/-/playwright-core-1.50.0.tgz",
+      "integrity": "sha512-CXkSSlr4JaZs2tZHI40DsZUN/NIwgaUPsyLuOAaIZp2CyF2sN5MM5NJsyB188lFSSozFxQ5fPT4qM+f0tH/6wQ==",
+      "license": "Apache-2.0",
+      "bin": {
+        "playwright-core": "cli.js"
+      },
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/raw-body": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-3.0.0.tgz",
+      "integrity": "sha512-RmkhL8CAyCRPXCE28MMH0z2PNWQBNk2Q09ZdxM9IOOXwxwZbN+qbWaatPkdkWIKL2ZVDImrN/pK5HTRz2PcS4g==",
+      "license": "MIT",
+      "dependencies": {
+        "bytes": "3.1.2",
+        "http-errors": "2.0.0",
+        "iconv-lite": "0.6.3",
+        "unpipe": "1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/rechoir": {
+      "version": "0.6.2",
+      "resolved": "https://registry.npmjs.org/rechoir/-/rechoir-0.6.2.tgz",
+      "integrity": "sha512-HFM8rkZ+i3zrV+4LQjwQ0W+ez98pApMGM3HUrN04j3CqzPOzl9nmP15Y8YXNm8QHGv/eacOVEjqhmWpkRV0NAw==",
+      "dev": true,
+      "dependencies": {
+        "resolve": "^1.1.6"
+      },
+      "engines": {
+        "node": ">= 0.10"
+      }
+    },
+    "node_modules/resolve": {
+      "version": "1.22.10",
+      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
+      "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "is-core-module": "^2.16.0",
+        "path-parse": "^1.0.7",
+        "supports-preserve-symlinks-flag": "^1.0.0"
+      },
+      "bin": {
+        "resolve": "bin/resolve"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/safer-buffer": {
+      "version": "2.1.2",
+      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
+      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
+      "license": "MIT"
+    },
+    "node_modules/setprototypeof": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
+      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
+      "license": "ISC"
+    },
+    "node_modules/shelljs": {
+      "version": "0.8.5",
+      "resolved": "https://registry.npmjs.org/shelljs/-/shelljs-0.8.5.tgz",
+      "integrity": "sha512-TiwcRcrkhHvbrZbnRcFYMLl30Dfov3HKqzp5tO5b4pt6G/SezKcYhmDg15zXVBswHmctSAQKznqNW2LO5tTDow==",
+      "dev": true,
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "glob": "^7.0.0",
+        "interpret": "^1.0.0",
+        "rechoir": "^0.6.2"
+      },
+      "bin": {
+        "shjs": "bin/shjs"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/shx": {
+      "version": "0.3.4",
+      "resolved": "https://registry.npmjs.org/shx/-/shx-0.3.4.tgz",
+      "integrity": "sha512-N6A9MLVqjxZYcVn8hLmtneQWIJtp8IKzMP4eMnx+nqkvXoqinUPCbUFLp2UcWTEIUONhlk0ewxr/jaVGlc+J+g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "minimist": "^1.2.3",
+        "shelljs": "^0.8.5"
+      },
+      "bin": {
+        "shx": "lib/cli.js"
+      },
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/statuses": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
+      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/supports-preserve-symlinks-flag": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
+      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/toidentifier": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
+      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.6"
+      }
+    },
+    "node_modules/typescript": {
+      "version": "5.7.3",
+      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.7.3.tgz",
+      "integrity": "sha512-84MVSjMEHP+FQRPy3pX9sTVV/INIex71s9TL2Gm5FG/WG1SqXeKyZ0k7/blY/4FdOzI12CBy1vGc4og/eus0fw==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "bin": {
+        "tsc": "bin/tsc",
+        "tsserver": "bin/tsserver"
+      },
+      "engines": {
+        "node": ">=14.17"
+      }
+    },
+    "node_modules/undici-types": {
+      "version": "6.19.8",
+      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.19.8.tgz",
+      "integrity": "sha512-ve2KP6f/JnbPBFyobGHuerC9g1FYGn/F8n1LWTwNxCEzd6IfqTwUQcNXgEtmmQ6DlRrC1hrSrBnCZPokRrDHjw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/unpipe": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
+      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/wrappy": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
+      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/zod": {
+      "version": "3.24.2",
+      "resolved": "https://registry.npmjs.org/zod/-/zod-3.24.2.tgz",
+      "integrity": "sha512-lY7CDW43ECgW9u1TcT3IoXHflywfVqDYze4waEz812jR/bZ8FHDsl7pFQoSZTz5N+2NqRXs8GBwnAwo3ZNxqhQ==",
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/colinhacks"
+      }
+    },
+    "node_modules/zod-to-json-schema": {
+      "version": "3.24.1",
+      "resolved": "https://registry.npmjs.org/zod-to-json-schema/-/zod-to-json-schema-3.24.1.tgz",
+      "integrity": "sha512-3h08nf3Vw3Wl3PK+q3ow/lIil81IT2Oa7YpQyUUDsEWbXveMesdfK1xBd2RhCkynwZndAxixji/7SYJJowr62w==",
+      "license": "ISC",
+      "peerDependencies": {
+        "zod": "^3.24.1"
+      }
+    }
+  }
+}
